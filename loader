#!/usr/bin/python3
from asciimatics.effects import Print
from asciimatics.renderers import BarChart
from asciimatics.widgets import Frame, MultiColumnListBox, Layout, Divider, Text, Button, TextBox, Widget, Label
from asciimatics.scene import Scene
from asciimatics.screen import Screen
from asciimatics.exceptions import ResizeScreenError, NextScene, StopApplication
import sys
import os
import subprocess
from random import randint

def get_progress():
    global progress
    process = subprocess.run(['./get_progress'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    progress = int(float(process.stdout)*100)
    return progress

class ProgressBar(Print):
    def __init__(self, screen, number):
        super(ProgressBar, self).__init__(
            screen,
            BarChart(7, 60, [get_progress],
                     char=">",
                     scale=100.0,
                     labels=True,
                     axes=BarChart.X_AXIS),
            x=(screen.width - 60) // 2,
            y=(screen.height - 7) // 2,
            transparent=False, speed=2)

        self.number = number

    def _update(self, frame_no):
        global progress
        if progress >= 99:
            raise NextScene(str(int(self.number)+1))
        else:
            super(ProgressBar, self)._update(frame_no)

class Model(object):
    def __init__(self):
        self.drive = ""
        self.image = ""

class View(Frame):
    def __init__(self, screen, data, number):
        super(View, self).__init__(screen,
                                   screen.height * 2 // 3,
                                   screen.width * 2 // 3,
                                   on_load=self.reload,
                                   hover_focus=True,
                                   title="Flash Loader")

        self.model = data
        self.screen = screen
        self.number = number

        self.layout = Layout([100], fill_frame=True)
        self.add_layout(self.layout)
        self.button_bar = Layout([1, 1])
        self.add_layout(self.button_bar)

        if number == "0":
            self.init_0()
        elif number == "1":
            self.init_1()
        elif number == "2":
            self.init_2()
        elif number == "3":
            self.init_3()
        elif number == "5":
            self.init_5()

        self.layout.add_widget(Divider())
        self.fix()

    def init_0(self):
        self.layout.add_widget(Label("My IP is: 192.168.92.105"))
        self.button_bar.add_widget(Button("Quit", self.quit), 0)
        self.button_bar.add_widget(Button("Start", self.next), 1)

    def init_1(self):
        self.button_bar.add_widget(Button("Prev", self.prev), 0)
        self.images = os.listdir("/srv/ftp/images")
        self.images = [([x], i) for i, x in enumerate(self.images)]
        self.images_list = MultiColumnListBox(Widget.FILL_FRAME, [0], self.images, on_select=self.select_image)
        self.layout.add_widget(self.images_list)

    def init_2(self):
        self.button_bar.add_widget(Button("Prev", self.prev), 0)
        process = subprocess.run(['parted', '-lms'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        process_out = str(process.stdout).split("\\n")
        self.drives = []
        count = 0
        for line in process_out:
            if "dev" in line:
                if "sda" not in line:
                    self.drives.append(([line], count))
                    count += 1

        self.drives_list = MultiColumnListBox(Widget.FILL_FRAME, [0], self.drives, on_select=self.select_drive)
        self.layout.add_widget(self.drives_list)

    def init_3(self):
        self.button_bar.add_widget(Button("Prev", self.prev), 0)
        self.button_bar.add_widget(Button("Ok", self.write), 1)
        self.layout.add_widget(Label("Are you sure you want to write " + self.model.image + " to " + self.model.drive + "?"))

    def init_5(self):
        self.layout.add_widget(Label("Process was successful."))
        self.button_bar.add_widget(Button("Restart", self.restart), 0)
        self.button_bar.add_widget(Button("Quit", self.quit), 1)

    def select_image(self):
        if self.images_list.value is None:
            self.images_list.value = 0
        self.model.image = self.images[self.images_list.value][0][0]
        self.next()

    def select_drive(self):
        if self.drives_list.value is None:
            self.drives_list.value = 0
        self.model.drive = self.drives[self.drives_list.value][0][0]
        self.next()
    
    def write(self):
        self.model.drive = self.model.drive.split(":")[0]
        subprocess.Popen(['gzip', '-dc',
                          '/srv/ftp/images/' + self.model.image,
                          '|', 'dd',
                          'of='+self.model.drive],
                          stdout=subprocess.DEVNULL,
                          stderr=subprocess.DEVNULL)
        self.next()

    def next(self):
        raise NextScene(str(int(self.number)+1))

    def restart(self):
        raise NextScene("0")

    def prev(self):
        raise NextScene(str(int(self.number)-1))

    def reload(self):
        self.__init__(self.screen, self.model, self.number) 

    @staticmethod
    def quit():
        raise StopApplication("User pressed quit")

def loader(screen, scene):
    scenes = []
    for i in range(7):
        if i == 4:
            scenes.append(Scene([ProgressBar(screen, str(i))], -1, name=str(i)))
        else:
            scenes.append(Scene([View(screen, runtimeData, str(i))], -1, name=str(i)))
    
    screen.play(scenes, stop_on_resize=True, start_scene=scene)

last_scene = None
runtimeData = Model()
progress = 0

while True:
    try:
        Screen.wrapper(loader, catch_interrupt=True, arguments=[last_scene])
        sys.exit(0)
    except ResizeScreenError as e:
        last_scene = e.scene
